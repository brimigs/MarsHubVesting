import {
  useWalletManager,
  useWallet,
  fetchBalances,
  WalletConnectionStatus,
} from "@marsprotocol/wallet-connector";
import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import BigNumber from "bignumber.js";
import { MarsVestingQueryClient } from "./types/generated/mars-vesting/MarsVesting.client";
import {useMarsVestingPositionQuery} from "./types/generated/mars-vesting/MarsVesting.react-query";
import {useMarsVestingVotingPowerQuery} from "./types/generated/mars-vesting/MarsVesting.react-query";
import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { PositionResponse } from "./types/generated/mars-vesting/MarsVesting.types";

export default function Home() {
  const { connect, disconnect } = useWalletManager();
  const { status, signingCosmWasmClient, name, chainInfo } =
      useWallet();

      const address = 'mars1hn5gxjz9y02m7h7ngpayfx9rs67jxgm0gj8mhs'

  const [position, setPosition] = useState<PositionResponse>()

  const [userBalance, setUserBalance] = useState<string | undefined>();

  const isConnected = status === WalletConnectionStatus.Connected;

  const vestingAddress = "mars14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9smxjtde";

  const client = new MarsVestingQueryClient(signingCosmWasmClient as CosmWasmClient, vestingAddress)

  const queryPosition = async () => {
    //thi sline
    if (!address) return 
    //come here
    // before assings position, it's waiting.
    const positionResponse = await client.position({user: address})
    console.log(positionResponse)
    // continues here after request received
    setPosition(positionResponse)
  } ;

  const queryVotingPower = async () => {
    if (!address) return 
    await client.votingPower({user: address})
  };

  const rm = BigNumber.ROUND_HALF_CEIL;

  const dp = (decimals: number, symbol?: string): number =>
      !symbol || symbol === "uusd" ? 2 : decimals;

  const lookup = (amount: number, symbol: string, decimals: number): number => {
    const value = symbol
        ? new BigNumber(amount).div(10 ** decimals)
        : new BigNumber(amount);

    return value.dp(dp(decimals, symbol), rm).toNumber();
  };

  useEffect(() => {
    const interval = setInterval(async () => {
      const userBalances = await fetchBalances(
          address || "",
          chainInfo?.chainId
      );

      if (userBalances && userBalances.balances?.length) {
        setUserBalance(userBalances.balances[0].amount);
      } else {
        if (!userBalance) {
          setUserBalance("0");
        }
      }
    }, 3000);
    return () => clearInterval(interval);
  }, [address, userBalance]);

  return (
      <div className={styles.container}>
        <Head>
          <title>Mars Hub Vested Tokens</title>
          <meta name="This UI allows you to query you vested token position and unlocked schedule for the connect wallet" content="Generated by Mars Protocol" />
          <link rel="icon" href="/favicon.svg" />
        </Head>

        <main className={styles.main}>
          {isConnected ? (
              <>
                <button onClick={queryPosition}>Fetch position</button>
                <p>{`User Balance: ${lookup(
                    Number(userBalance) || 0,
                    chainInfo?.stakeCurrency?.coinDenom || "",
                    chainInfo?.stakeCurrency?.coinDecimals || 6
                )} MARS`}
                </p>

                <br/>
                
                {position && <ul>
                  <li>total: {position.total}</li>
                  <li>unlocked: {position.unlocked}</li>
                  <li>user: {position.user}</li>
                  <li>vest_schedule: {JSON.stringify(position.vest_schedule)}</li>
                  <li>vested: {position.vested}</li>
                  <li>withdrawable: {position.withdrawable}</li>
                  <li>withdrawn: {position.withdrawn}</li>
                </ul>}
                {/* <p>{`Vested Position: ${lookup(
                    Number(position) || 0,
                    chainInfo?.stakeCurrency?.coinDenom || "",
                    chainInfo?.stakeCurrency?.coinDecimals || 6
                )} MARS`}
                </p>
                <br/>
                <p> {`Voting Power: ${lookup(
                    Number(queryVotingPower) || 0,
                    chainInfo?.stakeCurrency?.coinDenom || "",
                    chainInfo?.stakeCurrency?.coinDecimals || 6
                )} MARS`}
                </p> */}
                {/*<button onClick={executeMesssage}>Execute</button>*/}
                <br/>
                <button onClick={disconnect}>{`Disconnect ${name}`}</button>{" "}
              </>
          ) : (
              <button onClick={connect}>Connect Wallet</button>
          )}
        </main>
      </div>
  );
}

